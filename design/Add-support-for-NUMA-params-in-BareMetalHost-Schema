<!--
 This work is licensed under a Creative Commons Attribution 3.0
 Unported License.

 http://creativecommons.org/licenses/by/3.0/legalcode
-->

# Add support for NUMA params in BareMetalHost Schema

## Table of Contents

<!--ts-->
   * [Add support for NUMA params in BareMetalHost Schema](#title)
      * [Table of Contents](#table-of-contents)
      * [Summary](#summary)
      * [Motivation](#motivation)
         * [Goals](#goals)
      * [Proposal](#proposal)
         * [Implementation Details/Notes/Constraints](#implementation-detailsnotesconstraints)
         * [Risks and Mitigations](#risks-and-mitigations)
      * [Design Details](#design-details)
         * [Work Items](#work-items)
         * [Dependencies](#dependencies)
         * [Test Plan](#test-plan)
      * [References](#references)
<!--te-->

## Summary

Enhancing the `BareMetalHost` schema by adding NUMA parameters that we received 
from ironic introspection which will be helpful in performance based use cases.

## Motivation

To make the existing `BareMetalHost` schema compatible and scalable for heavy computation 
based use cases.  

### Goals

Add support for `NUMA` topology in `BareMetalHost` schema.

## Proposal

We propose to add `NUMA` parameters in `BareMetalHost` schema for 
scalability and performance enhancement.

### Implementation Details/Notes/Constraints

Link for Existing `Metal3` Specs

Please refer `metal3` spec for bare-metal:
https://github.com/metal3-io/baremetal-operator/blob/master/deploy/crds/metal3.io_baremetalhosts_crd.yaml

The investigation of the existing schema indicates that BareMetal-Operator 
gets BareMetal node introspection data using an API call to `Ironic-Inspector` 
through `gopher-cloud client` library. 

Having fetched BareMetal Node introspection data from Ironic-Inspector and
compared it with BareMetalHost schema of `metal3` `(metal3.io_baremetalhosts_crd.yaml`), 
we recommend `NUMA` parameters need to be added in schema of `metal3` for `NFV` 
workloads.
1. Add enhancement in the existing `metal3` schema for the following parameters:

    Parameters for `NUMA` :
     
    For better performance, selection of CPUs based on the `NUMA` topology 
    becomes necessary. In case of nodes with `DPDK` aware NICs, the CPUs for 
    poll mode driver (PMD) need to be selected from the `NUMA` node associated 
    with the `DPDK` NICs. If hyperthreading is enabled, then selection of the 
    logical cores requires the knowledge of the siblings.  

    Declarative design idea:
    ````yaml
    numaNodes:
      properties:
         numaNodeId:
             type: string
             description: Numa node id
         numaNodesDetails:
             properties:
                 nics:
                     properties:
                         NumaNic:
                             type: string
                             description: network interface name
                         type: array
                     type: object
                 ram:
                     properties:
                         size_mib:
                             type: integer
                             description: memory in mib
                     type: object
                 cpu:
                     properties:
                         thread_siblings:
                             type: integer
                             type: array
                         description: list of thread_siblings for each core
                     type: object
      required:
      - numaNodeId
      - nics
      - ram
      - cpu
      type: object
   
    nodeDetails:
      description: The CPU,RAM,NIC details discovered to exist on the host.
      properties:
         cpu:
           description: CPU describes one processor on the host.
           properties:
              arch:
                type: string
              clockMegahertz:
                description: ClockSpeed is a clock speed in MHz
              count:
                type: integer
              flags:
                items:
                  type: string
                type: array
              model:
                type: string
           required:
           - arch
           - clockMegahertz
           - count
           - flags
           - model
           type: object
   
         nics:
           items:
             description: NIC describes one network interface on the host.
             properties:
               ip:
                 description: The IP address of the device
                 type: string
               mac:
                 description: The device MAC addr
                 pattern: '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'
                 type: string
               model:
                 description: The name of the model, e.g. "virt-io"
                 type: string
               name:
                 description: The name of the NIC, e.g. "nic-1"
                 type: string
               pxe:
                 description: Whether the NIC is PXE Bootable
                 type: boolean
               speedGbps:
                 description: The speed of the device
                 type: integer
               vlanId:
                 description: The untagged VLAN ID
                 format: int32
                 type: integer
               vlans:
                 description: The VLANs available
                 items:
                   description: VLAN represents the name and ID of a VLAN
                   properties:
                     id:
                       description: VLANID is a 12-bit 802.1Q VLAN identifier
                       format: int32
                       type: integer
                     name:
                       type: string
                   required:
                   - id
                   type: object
               type: array
             required:
             - ip
             - mac
             - model
             - name
             - pxe
             - speedGbps
             - vlanId
             type: object
           type: array
   
         ramMebibytes:
           type: integer
	  required:
      - cpu
      - nics
      - ram
      type: object		  
    ````
2. Enhance struct in `baremetalhost_types.go` to store values for additional proposed parameters.
    ````yaml
    type HardwareDetails struct {
        SystemVendor HardwareSystemVendor  `json:"systemVendor"`
        Firmware     Firmware              `json:"firmware"`
        NodeDetails  NodeDetails
        NumaNodes    []NumaNodes
        Storage      []Storage             `json:"storage"`
        Hostname     string                `json:"hostname"`
    }
    
    type NumaNodes struct {
        NumaNodeId      int 
        NumaNodeDetails NodeDetails
    }
    
    type NodeDetails struct {
        CPU          CPU    `json:"cpu"`
        NIC          []NIC  `json:"nics"`
        RAMMebibytes int    `json:"ramMebibytes"`
    }
    
    type CPU struct {
        Arch           string     `json:"arch"`
        Model          string     `json:"model"`
        ClockMegahertz ClockSpeed `json:"clockMegahertz"`
        Flags          []string   `json:"flags"`
        Count          int        `json:"count"`
        ThreadSiblings [][]int    `json:"thread_siblings"`
    }
        
    type NIC struct {
        Name      string    `json:"name"`
        Model     string    `json:"model"`
        MAC       string    `json:"mac"`
        IP        string    `json:"ip"`
        SpeedGbps int       `json:"speedGbps"`
        VLANs     []VLAN    `json:"vlans,omitempty"`
        VLANID    VLANID    `json:"vlanId"`
        PXE       bool      `json:"pxe"`
        NumaNic   []string  `json:"name"`
    }
    ````
3. Changes in ironic.go:

* To add support for parameters of `NUMA` we will create `getNUMADetails()` function which will parse `NUMA` params 
and return the values to defined structures.
* Update existing functions of `CPU`, `NIC`, `RAM` which will get details and return values to respective structures.

### Risks and Mitigations

None

## Design Details

![Implementation-flow](enhance-schema-for-metal3-flow.png)

*The changes are illustrated  in Implementation Details section.

### Work Items

1. Introduce new section called `NumaNodes` under `hardware` in schema `metal3.io_baremetalhosts_crd.yaml`.
2. Define structure for `NUMA` parameters in `baremetalhost_types.go`.
3. Fetch `NUMA` details from `Ironic` and store it in structure. 
4. Write unit tests for above implementation.

### Dependencies

* Ironic
* Gophercloud

### Test Plan
 
1. Unit test will be implemented.
2. Functional testing will be performed.
3. Deployment & integration testing will be done.

## References

* https://github.com/metal3-io
* https://github.com/metal3-io/baremetal-operator/blob/master/deploy/crds/metal3.io_baremetalhosts_crd.yaml
